package parser_test

import (
	"strings"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/AstraProtocol/astra-indexing/infrastructure/tendermint"
	command_usecase "github.com/AstraProtocol/astra-indexing/usecase/command"
	"github.com/AstraProtocol/astra-indexing/usecase/event"
	"github.com/AstraProtocol/astra-indexing/usecase/model"
	"github.com/AstraProtocol/astra-indexing/usecase/parser"
	usecase_parser_test "github.com/AstraProtocol/astra-indexing/usecase/parser/test"
)

var _ = Describe("ParseMsgCommands", func() {
	Describe("MsgExec", func() {
		It("should parse Msg commands when there is MsgEthereumTx in the transaction contract create", func() {
			block, _, _ := tendermint.ParseBlockResp(strings.NewReader(
				usecase_parser_test.TX_MSG_ETHEREUM_TX_BLOCK_RESP,
			))
			blockResults, _ := tendermint.ParseBlockResultsResp(strings.NewReader(
				usecase_parser_test.TX_MSG_ETHEREUM_TX_BLOCK_RESULTS_RESP,
			))

			tx := mustParseTxsResp(usecase_parser_test.TX_MSG_ETHEREUM_CONTRACT_CREATE)
			txs := []model.Tx{*tx}

			accountAddressPrefix := "tcro"
			stakingDenom := "basetcro"

			pm := usecase_parser_test.InitParserManager()

			cmds, possibleSignerAddresses, err := parser.ParseBlockTxsMsgToCommands(
				pm,
				block.Height,
				blockResults,
				txs,
				accountAddressPrefix,
				stakingDenom,
			)
			Expect(err).To(BeNil())
			Expect(cmds).To(HaveLen(1))
			cmd := cmds[0]
			Expect(cmd.Name()).To(Equal("/ethermint.evm.v1.MsgEthereumTx.Create"))

			Expect(cmd).To(Equal(command_usecase.NewCreateMsgEthereumTx(
				event.MsgCommonParams{
					BlockHeight: int64(83178),
					TxHash:      "2678437368AFC7E0E6D891D858F17B9C05CFEE850A786592A11992813D6A89FD",
					TxSuccess:   true,
					MsgIndex:    0,
				},
				model.MsgEthereumTxParams{
					RawMsgEthereumTx: model.RawMsgEthereumTx{

						Type: "/ethermint.evm.v1.MsgEthereumTx",
						Size: 0,
						Data: model.LegacyTx{
							Type:     "/ethermint.evm.v1.LegacyTx",
							Nonce:    "1238",
							GasPrice: "20000000000",
							Gas:      "778386",
							To:       "",
							Value:    "0",
							Data:     "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",
							V:        "Vvo=",
							R:        "jdfvei8GJZi5oqsNA2E4PQa2Sn76ArheXF01/ZeNkNA=",
							S:        "PXosJ2l/ZL9Boen7S3rJ6p8B0y5nFkDOPJD18y3VgtM=",
						},
						From: "0x6F966DA8f83ac4b4ae3DFbD2da1aDa7f333967b1",
						Hash: "0xd9cdbdcf0b0812bbf692ec88ced1ae39715899c2d45ed2df99eda2732cfd7800",
					},
				},
			)))
			var emptyAddress []string
			Expect(possibleSignerAddresses).To(Equal(emptyAddress))
		})
	})
})
